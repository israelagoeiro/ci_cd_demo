name: CD Pipeline

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Ambiente para implantação'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - test
        - prod
      version:
        description: 'Versão para implantação (apenas para prod)'
        required: false
        default: 'latest'

jobs:
  deploy-dev:
    if: github.event.inputs.environment == 'dev' || (github.ref == 'refs/heads/develop' && github.event_name == 'push')
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    # Configurar QEMU para suporte a múltiplas plataformas
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2
    
    # Configurar Docker Buildx com mais opções
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      with:
        install: true
        version: latest
        driver-opts: image=moby/buildkit:latest
    
    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    
    - name: Build and push API image
      uses: docker/build-push-action@v4
      with:
        context: ./api
        file: ./api/Dockerfile
        push: true
        tags: ${{ secrets.DOCKERHUB_USERNAME }}/ci-cd-demo-api:develop
        cache-from: type=gha
        cache-to: type=gha,mode=max
        provenance: false
        platforms: linux/amd64
    
    - name: Build and push Frontend image
      uses: docker/build-push-action@v4
      with:
        context: ./frontend
        file: ./frontend/Dockerfile
        push: true
        tags: ${{ secrets.DOCKERHUB_USERNAME }}/ci-cd-demo-frontend:develop
        cache-from: type=gha
        cache-to: type=gha,mode=max
        provenance: false
        platforms: linux/amd64
    
    - name: Deploy to Development Environment
      run: |
        echo "Deploying to development environment..."
        # Aqui você adicionaria comandos para deploy no ambiente de desenvolvimento
        # Por exemplo, usando SSH para acessar o servidor e executar docker-compose
  
  deploy-test:
    if: github.event.inputs.environment == 'test'
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    # Configurar QEMU para suporte a múltiplas plataformas
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2
    
    # Configurar Docker Buildx com mais opções
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      with:
        install: true
        version: latest
        driver-opts: image=moby/buildkit:latest
    
    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    
    - name: Build and push API image
      uses: docker/build-push-action@v4
      with:
        context: ./api
        file: ./api/Dockerfile
        push: true
        tags: ${{ secrets.DOCKERHUB_USERNAME }}/ci-cd-demo-api:test
        cache-from: type=gha
        cache-to: type=gha,mode=max
        provenance: false
        platforms: linux/amd64
    
    - name: Build and push Frontend image
      uses: docker/build-push-action@v4
      with:
        context: ./frontend
        file: ./frontend/Dockerfile
        push: true
        tags: ${{ secrets.DOCKERHUB_USERNAME }}/ci-cd-demo-frontend:test
        cache-from: type=gha
        cache-to: type=gha,mode=max
        provenance: false
        platforms: linux/amd64
    
    - name: Deploy to Test Environment
      run: |
        echo "Deploying to test environment..."
        # Aqui você adicionaria comandos para deploy no ambiente de teste
  
  deploy-prod:
    if: github.event.inputs.environment == 'prod' || github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    # Configurar QEMU para suporte a múltiplas plataformas
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2
    
    # Configurar Docker Buildx com mais opções
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      with:
        install: true
        version: latest
        driver-opts: image=moby/buildkit:latest
    
    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    
    - name: Set version tag
      id: set-version
      run: |
        if [ "${{ github.event.inputs.version }}" != "" ] && [ "${{ github.event.inputs.version }}" != "latest" ]; then
          echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
        else
          echo "VERSION=latest" >> $GITHUB_OUTPUT
        fi
    
    - name: Build and push API image
      uses: docker/build-push-action@v4
      with:
        context: ./api
        file: ./api/Dockerfile
        push: true
        tags: ${{ secrets.DOCKERHUB_USERNAME }}/ci-cd-demo-api:${{ steps.set-version.outputs.VERSION }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        provenance: false
        platforms: linux/amd64
    
    - name: Build and push Frontend image
      uses: docker/build-push-action@v4
      with:
        context: ./frontend
        file: ./frontend/Dockerfile
        push: true
        tags: ${{ secrets.DOCKERHUB_USERNAME }}/ci-cd-demo-frontend:${{ steps.set-version.outputs.VERSION }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        provenance: false
        platforms: linux/amd64
    
    - name: Deploy to Production Environment
      run: |
        echo "Deploying to production environment with version ${{ steps.set-version.outputs.VERSION }}..."
        # Aqui você adicionaria comandos para deploy no ambiente de produção 